.row
  = f.text_field :host

.row
  = f.text_field :port

.row
  = f.text_field :user

.row
  = f.password_field :password

.row
  = f.text_field :system_type

- ton_values = [['Unknown', '0'], ['International', '1'], ['National', '2'], ['Network Specific', '3'], ['Subscriber Number', '4'], ['Alphanumeric', '5'], ['Abbreviated', '6']]

- npi_values = [['Unknown', '0'], ['ISDN (E163/E164)', '1'], ['Data (X.121)', '3'], ['Telex (F.69)', '4'], ['Land Mobile (E. 212)', '6'], ['National', '8'], ['Private', '9'], ['ERMES', '10'], ['Internet (IP)', '14'], ['WAP Client Id', '18']]

.row
  h5.col.s12
    | Numbering Configuration

.row
  div.col.s3
    = f.label "Type of number"

.row
  = f.select :source_ton, options_for_select(ton_values, @config.source_ton), :label => "Source", :colspan => "s4"
  = f.select :destination_ton, options_for_select(ton_values, @config.destination_ton), :label => "Destination", :colspan => "s4"

.row
  div.col.s3
    = f.label "Numeric plan indicator"

.row
  = f.select :source_npi, options_for_select(npi_values, @config.source_npi), :label => "Source", :colspan => "s4"
  = f.select :destination_npi, options_for_select(npi_values, @config.destination_npi), :label => "Destination", :colspan => "s4"

.row
  h5.col.s12
    | MO: incoming from mobile

- encodings = [['ASCII', 'ascii'], ['Latin1', 'latin1'], ['UCS-2', 'ucs-2'], ['GSM 03.38', 'gsm']]

.row
  = f.check_box :endianness_mo, {:checked => @config.endianness_mo == 'little', :label => 'Use little endian encoding for UCS-2', :class => "filled-in"}, :little, :big

.row
  = f.check_box :accept_mo_hex_string, {:label => 'Accept hex strings', :class => "filled-in"}

.row.margin-top
  = f.select :default_mo_encoding, options_for_select(encodings, @config.default_mo_encoding), :label => "Default encoding", :colspan => "s4"

.row
  h5.col.s12
    | MT: Mobile terminated messages

- @config.mt_encodings = encodings.map{|x|x[1]} unless @config.mt_encodings.present?

.row
  div.col.s3
    = f.label "Encodings"

- encodings.each do |encoding|
  - encoding_included = @config.mt_encodings.include? encoding[1].to_s
  - next if encoding[1] == 'gsm'
  - if encoding[1] == "ucs-2"
    .row
      div.col.s3
        label
          input id="#{encoding[1]}" name="config[mt_encodings][]" type="checkbox" value="#{encoding[1]}" checked=(encoding_included) class="filled-in" onChange="toggle()"
          span
            = encoding[0]
      div#endianness_mt style="display: #{encoding_included ? 'block' : 'none'}"
        = f.check_box :endianness_mt, {:checked => @config.endianness_mt == 'little', :label => 'Use little endian encoding for UCS-2', :class => "filled-in"}, :little, :big
  - else
    .row
        div.col.s3
          label
            input id="#{encoding[1]}" name="config[mt_encodings][]" type="checkbox" value="#{encoding[1]}" checked=(@config.mt_encodings.include? encoding[1].to_s) class="filled-in"
            span
              = encoding[0]

.row.margin-top
  div.col.s3
    = f.label "Message splitting"

.row
  div.col.s12
    | When message is larger than
    = f.inline_select :config_mt_max_length, options_for_select(['140', '160', '254'], @config.mt_max_length), :class => "inline", :name => "config[mt_max_length]"
    | split it using
    = f.inline_select :config_mt_csms_method, options_for_select([['User Data Header', 'udh'], ['Optional parameters', 'optional_parameters'], ['Message payload', 'message_payload']], @config.mt_csms_method), :class => "inline", :name => "config[mt_csms_method]"

.row
  h5.col.s12
    | Vendor custom error codes

.row
  = f.text_field :suspension_codes, :label => 'Suspension codes (comma separated):'

.row
  = f.text_field :rejection_codes, :label => 'Rejection codes (comma separated):'

javascript:
  function toggle() {
    $("#endianness_mt").toggle()
  }

  $(document).ready(function(){
    $('select').formSelect();
  });
